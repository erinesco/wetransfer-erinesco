{"version":3,"sources":["components/Spinner.jsx","theme.js","components/StartStopButtons.jsx","examples/LargeSpinner.jsx","examples/RegularSpinner.jsx","examples/SmoothSpinner.jsx","PageWrapper.jsx","App.jsx","index.jsx"],"names":["Spinner","props","Box","position","display","CircularProgress","variant","size","color","value","top","left","bottom","right","alignItems","justifyContent","Typography","textVariant","component","Math","round","defaultProps","theme","createMuiTheme","palette","type","StartStopButtons","my","Button","onClick","onClickStart","disabled","isActive","style","marginRight","spacing","onClickStop","LargeSpinner","useState","progress","setProgress","active","setActive","useEffect","timer","setInterval","prevProgress","clearInterval","text","primary","RegularSpinner","SmoothSpinner","PageWrapper","ThemeProvider","backgroundColor","background","default","height","Container","children","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAMaA,EAAU,SAACC,GAAD,OACrB,eAACC,EAAA,EAAD,CAAKC,SAAS,WAAWC,QAAQ,cAAjC,UACE,cAACC,EAAA,EAAD,CAAkBC,QAAQ,cAAcC,KAAMN,EAAMM,KAAMC,MAAM,UAAUC,MAAOR,EAAMQ,QACvF,cAACP,EAAA,EAAD,CACEQ,IAAK,EACLC,KAAM,EACNC,OAAQ,EACRC,MAAO,EACPV,SAAS,WACTC,QAAQ,OACRU,WAAW,SACXC,eAAe,SARjB,SAUE,cAACC,EAAA,EAAD,CAAYV,QAASL,EAAMgB,YAAaC,UAAU,MAAMV,MAAM,gBAA9D,mBACMW,KAAKC,MACPnB,EAAMQ,OAFV,aAeNT,EAAQqB,aAAe,CACrBd,KAAM,GACNU,YAAa,W,YClCFK,EAAQC,YAAe,CAClCC,QAAS,CACPC,KAAM,U,QCEGC,EAAmB,SAACzB,GAAD,OAC9B,eAACC,EAAA,EAAD,CAAKyB,GAAI,EAAT,UACE,cAACC,EAAA,EAAD,CAAQtB,QAAQ,YAAYE,MAAM,UAAUqB,QAAS5B,EAAM6B,aAAcC,SAAU9B,EAAM+B,SAAUC,MAAO,CAAEC,YAAaZ,EAAMa,QAAQ,IAAvI,mBAGA,cAACP,EAAA,EAAD,CAAQtB,QAAQ,YAAYE,MAAM,YAAYqB,QAAS5B,EAAMmC,YAAaL,UAAW9B,EAAM+B,SAA3F,sBCJSK,EAAe,WAC1B,MAAgCC,mBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA4BF,oBAAS,GAArC,mBAAOG,EAAP,KAAeC,EAAf,KAcA,OAZAC,qBAAU,WACR,GAAKF,EAAL,CAGA,IAAMG,EAAQC,aAAY,WACxBL,GAAY,SAACM,GAAD,OAAmBA,GAAgB,IAAM,EAAIA,EAAe,QACvE,KACH,OAAO,WACLC,cAAcH,OAEf,CAACH,IAGF,eAACvC,EAAA,EAAD,CAAKyB,GAAI,EAAT,UACE,cAACX,EAAA,EAAD,CAAYiB,MAAO,CAAEzB,MAAOc,EAAME,QAAQwB,KAAKC,SAA/C,2BAGA,cAAC,EAAD,CAASxC,MAAO8B,EAAUhC,KAAM,IAAKU,YAAY,OACjD,cAAC,EAAD,CACEa,aAAc,kBAAMY,GAAU,IAC9BN,YAAa,kBAAMM,GAAU,IAC7BV,SAAUS,QCzBLS,EAAiB,WAC5B,MAAgCZ,mBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA4BF,oBAAS,GAArC,mBAAOG,EAAP,KAAeC,EAAf,KAcA,OAZAC,qBAAU,WACR,GAAKF,EAAL,CAGA,IAAMG,EAAQC,aAAY,WACxBL,GAAY,SAACM,GAAD,OAAmBA,GAAgB,IAAM,EAAIA,EAAe,QACvE,KACH,OAAO,WACLC,cAAcH,OAEf,CAACH,IAGF,eAACvC,EAAA,EAAD,CAAKyB,GAAI,EAAT,UACE,cAACX,EAAA,EAAD,CAAYiB,MAAO,CAAEzB,MAAOc,EAAME,QAAQwB,KAAKC,SAA/C,6BAGA,cAAC,EAAD,CAASxC,MAAO8B,IAChB,cAAC,EAAD,CACET,aAAc,kBAAMY,GAAU,IAC9BN,YAAa,kBAAMM,GAAU,IAC7BV,SAAUS,QCzBLU,EAAgB,WAC3B,MAAgCb,mBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA4BF,oBAAS,GAArC,mBAAOG,EAAP,KAAeC,EAAf,KAcA,OAZAC,qBAAU,WACR,GAAKF,EAAL,CAGA,IAAMG,EAAQC,aAAY,WACxBL,GAAY,SAACM,GAAD,OAAmBA,GAAgB,IAAM,EAAIA,EAAe,OACvE,KACH,OAAO,WACLC,cAAcH,OAEf,CAACH,IAGF,eAACvC,EAAA,EAAD,CAAKyB,GAAI,EAAT,UACE,cAACX,EAAA,EAAD,CAAYiB,MAAO,CAAEzB,MAAOc,EAAME,QAAQwB,KAAKC,SAA/C,4BAGA,cAAC,EAAD,CAASxC,MAAO8B,IAChB,cAAC,EAAD,CACET,aAAc,kBAAMY,GAAU,IAC9BN,YAAa,kBAAMM,GAAU,IAC7BV,SAAUS,Q,gBCzBLW,EAAc,SAACnD,GAAD,OACzB,cAACoD,EAAA,EAAD,CAAe/B,MAAOA,EAAtB,SACE,qBAAKW,MAAO,CAAEqB,gBAAiBhC,EAAME,QAAQ+B,WAAWC,QAASC,OAAQ,SAAzE,SACE,eAACC,EAAA,EAAD,WACE,cAAC1C,EAAA,EAAD,CAAYV,QAAQ,KAAK2B,MAAO,CAAEzB,MAAOc,EAAME,QAAQwB,KAAKC,SAA5D,oCACChD,EAAM0D,iBCMAC,MAXf,WACE,OACE,eAAC,EAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCPNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.24d3032f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\nexport const Spinner = (props) => (\n  <Box position=\"relative\" display=\"inline-flex\">\n    <CircularProgress variant=\"determinate\" size={props.size} color=\"primary\" value={props.value} />\n    <Box\n      top={0}\n      left={0}\n      bottom={0}\n      right={0}\n      position=\"absolute\"\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <Typography variant={props.textVariant} component=\"div\" color=\"textSecondary\">\n        {`${Math.round(\n          props.value,\n        )}%`}\n      </Typography>\n    </Box>\n  </Box>\n);\n\nSpinner.propTypes = {\n  size: PropTypes.number,\n  textVariant: PropTypes.string,\n  value: PropTypes.number.isRequired,\n};\n\nSpinner.defaultProps = {\n  size: 40,\n  textVariant: 'caption',\n};\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nexport const theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\nimport { theme } from '../theme';\n\nexport const StartStopButtons = (props) => (\n  <Box my={1}>\n    <Button variant=\"contained\" color=\"primary\" onClick={props.onClickStart} disabled={props.isActive} style={{ marginRight: theme.spacing(1) }}>\n      Start\n    </Button>\n    <Button variant=\"contained\" color=\"secondary\" onClick={props.onClickStop} disabled={!props.isActive}>\n      Stop\n    </Button>\n  </Box>\n);\n\nStartStopButtons.propTypes = {\n  onClickStart: PropTypes.func.isRequired,\n  onClickStop: PropTypes.func.isRequired,\n  isActive: PropTypes.bool.isRequired,\n\n};\n","import React, { useEffect, useState } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport { Spinner } from '../components/Spinner';\nimport { theme } from '../theme';\nimport { StartStopButtons } from '../components/StartStopButtons';\n\nexport const LargeSpinner = () => {\n  const [progress, setProgress] = useState(0);\n  const [active, setActive] = useState(false);\n\n  useEffect(() => {\n    if (!active) {\n      return;\n    }\n    const timer = setInterval(() => {\n      setProgress((prevProgress) => (prevProgress >= 100 ? 0 : prevProgress + 10));\n    }, 800);\n    return () => {\n      clearInterval(timer);\n    };\n  }, [active]);\n\n  return (\n    <Box my={1}>\n      <Typography style={{ color: theme.palette.text.primary }}>\n        Large Spinner\n      </Typography>\n      <Spinner value={progress} size={100} textVariant=\"h5\" />\n      <StartStopButtons\n        onClickStart={() => setActive(true)}\n        onClickStop={() => setActive(false)}\n        isActive={active}\n      />\n    </Box>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport { Spinner } from '../components/Spinner';\nimport { theme } from '../theme';\nimport { StartStopButtons } from '../components/StartStopButtons';\n\nexport const RegularSpinner = () => {\n  const [progress, setProgress] = useState(0);\n  const [active, setActive] = useState(false);\n\n  useEffect(() => {\n    if (!active) {\n      return;\n    }\n    const timer = setInterval(() => {\n      setProgress((prevProgress) => (prevProgress >= 100 ? 0 : prevProgress + 10));\n    }, 800);\n    return () => {\n      clearInterval(timer);\n    };\n  }, [active]);\n\n  return (\n    <Box my={1}>\n      <Typography style={{ color: theme.palette.text.primary }}>\n        Regular Spinner\n      </Typography>\n      <Spinner value={progress} />\n      <StartStopButtons\n        onClickStart={() => setActive(true)}\n        onClickStop={() => setActive(false)}\n        isActive={active}\n      />\n    </Box>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport { Spinner } from '../components/Spinner';\nimport { theme } from '../theme';\nimport { StartStopButtons } from '../components/StartStopButtons';\n\nexport const SmoothSpinner = () => {\n  const [progress, setProgress] = useState(0);\n  const [active, setActive] = useState(false);\n\n  useEffect(() => {\n    if (!active) {\n      return;\n    }\n    const timer = setInterval(() => {\n      setProgress((prevProgress) => (prevProgress >= 100 ? 0 : prevProgress + 1));\n    }, 100);\n    return () => {\n      clearInterval(timer);\n    };\n  }, [active]);\n\n  return (\n    <Box my={1}>\n      <Typography style={{ color: theme.palette.text.primary }}>\n        Smooth Spinner\n      </Typography>\n      <Spinner value={progress} />\n      <StartStopButtons\n        onClickStart={() => setActive(true)}\n        onClickStop={() => setActive(false)}\n        isActive={active}\n      />\n\n    </Box>\n  );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Container from '@material-ui/core/Container';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { theme } from './theme';\n\nexport const PageWrapper = (props) => (\n  <ThemeProvider theme={theme}>\n    <div style={{ backgroundColor: theme.palette.background.default, height: '100vh' }}>\n      <Container>\n        <Typography variant=\"h1\" style={{ color: theme.palette.text.primary }}>WeTransfer - Erin Esco</Typography>\n        {props.children}\n      </Container>\n    </div>\n  </ThemeProvider>\n);\n\nPageWrapper.propTypes = {\n  children: PropTypes.arrayOf(PropTypes.element).isRequired,\n};\n","import React from 'react';\nimport { LargeSpinner } from './examples/LargeSpinner';\nimport { RegularSpinner } from './examples/RegularSpinner';\nimport { SmoothSpinner } from './examples/SmoothSpinner';\n\nimport { PageWrapper } from './PageWrapper';\n\nfunction App() {\n  return (\n    <PageWrapper>\n      <RegularSpinner />\n      <LargeSpinner />\n      <SmoothSpinner />\n    </PageWrapper>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}